/*!
   @file basicRead.ino
   @brief Output readings of red light and IR
   @n This library supports mainboards: ESP8266, FireBeetle-M0, UNO, ESP32, Leonardo, Mega2560
   @copyright  Copyright (c) 2010 DFRobot Co.Ltd (http://www.dfrobot.com)
   @licence     The MIT License (MIT)
   @author [YeHangYu](hangyu.ye@dfrobot.com)
   @version  V0.1
   @date  2020-05-29
   @url https://github.com/DFRobot/DFRobot_MAX30102
*/
#include <ArduinoOSCWiFi.h>
#include <DFRobot_MAX30102.h>

int chair1pin = 23;
int chair2pin = 19;
int chair3pin = 22;
int chairval = 0;
int chairColor = 0;

// WiFi stuff

const char* ssid = "Noora";
const char* pwd = "aaaaaaaa";
const IPAddress ip(192, 168, 25, 24);
const IPAddress gateway(192, 168, 25, 6);
const IPAddress subnet(255, 255, 255, 0);

// for ArduinoOSC
const char* host = "192.168.25.245";
const int send_port = 54445;
float f;

DFRobot_MAX30102 particleSensor;
#define dataLength 100
struct resultat {
  int Min, Max;
  int finger;
};

resultat res;
int Data[dataLength];
int dataindex;
/*
  Macro definition opions in sensor configuration
  sampleAverage: SAMPLEAVG_1 SAMPLEAVG_2 SAMPLEAVG_4
               SAMPLEAVG_8 SAMPLEAVG_16 SAMPLEAVG_32
  ledMode:       MODE_REDONLY  MODE_RED_IR  MODE_MULTILED
  sampleRate:    PULSEWIDTH_69 PULSEWIDTH_118 PULSEWIDTH_215 PULSEWIDTH_411
  pulseWidth:    SAMPLERATE_50 SAMPLERATE_100 SAMPLERATE_200 SAMPLERATE_400
               SAMPLERATE_800 SAMPLERATE_1000 SAMPLERATE_1600 SAMPLERATE_3200
  adcRange:      ADCRANGE_2048 ADCRANGE_4096 ADCRANGE_8192 ADCRANGE_16384
*/
void setup()
{
  //Init serial
  Serial.begin(115200);

  /*!
    @brief Init sensor
    @param pWire IIC bus pointer object and construction device, can both pass or not pass parameters (Wire in default)
    @param i2cAddr Chip IIC address (0x57 in default)
    @return true or false
  */
  while (!particleSensor.begin()) {
    Serial.println("MAX30102 was not found");
    delay(1000);
  }

  // WiFi stuff (no timeout setting for WiFi)
#if defined(ESP_PLATFORM) || defined(ARDUINO_ARCH_RP2040)
#ifdef ESP_PLATFORM
  WiFi.disconnect(true, true);  // disable wifi, erase ap info
#else
  WiFi.disconnect(true);  // disable wifi
#endif
  delay(1000);
  WiFi.mode(WIFI_STA);
#endif

  WiFi.begin(ssid, pwd);

#ifdef ARDUINO_UNOR4_WIFI
  WiFi.config(ip);
#else
  WiFi.config(ip, gateway, subnet);
#endif

  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
#ifdef ARDUINO_UNOR4_WIFI
    static int count = 0;
    if (count++ > 20) {
      Serial.println("WiFi connection timeout, retry");
      WiFi.begin(ssid, pwd);
      count = 0;
    }
#endif
  }
  Serial.print("WiFi connected, IP = ");
  Serial.println(WiFi.localIP());

    pinMode(chair1pin, INPUT_PULLUP);
  pinMode(chair2pin, INPUT_PULLUP);
  pinMode(chair3pin, INPUT_PULLUP);



  /*!
    @brief Use macro definition to configure sensor
    @param ledBrightness LED brightness, default value: 0x1F（6.4mA), Range: 0~255（0=Off, 255=50mA）
    @param sampleAverage Average multiple samples then draw once, reduce data throughput, default 4 samples average
    @param ledMode LED mode, default to use red light and IR at the same time
    @param sampleRate Sampling rate, default 400 samples every second
    @param pulseWidth Pulse width: the longer the pulse width, the wider the detection range. Default to be Max range
    @param adcRange Measurement Range, default 4096 (nA), 15.63(pA) per LSB
  */
  particleSensor.sensorConfiguration(/*ledBrightness=*/0x1F, /*sampleAverage=*/SAMPLEAVG_4, \
      /*ledMode=*/MODE_MULTILED, /*sampleRate=*/SAMPLERATE_400, \
      /*pulseWidth=*/PULSEWIDTH_411, /*adcRange=*/ADCRANGE_4096);
}

void loop()
{
  //Print result
  /*!
    @brief Get red value
    @return Red light reading
  */
int chair1 = digitalRead(chair1pin);
  int chair2 = digitalRead(chair2pin);
  int chair3 = digitalRead(chair3pin);
    int chair1val = map(chair1, 1, 0, 0, 1);
  int chair2val = map(chair2, 1, 0, 0, 2);
  int chair3val = map(chair3, 1, 0, 0, 3);

  chairval = chair1 + chair2val + chair3val;
  chairColor = map(chairval, 0, 6, 0, 255);

  int val = particleSensor.getIR();
  res = MinMax(val);
  /*!
    @brief Get IR value
    @return IR reading
  */
  val = val - res.Min;
  double normie = (double) val / ( (double) res.Max - res.Min);
  f = (float) normie;

  OscWiFi.send(host, send_port, "/IR", f, res.finger, chairColor);
  OscWiFi.update();  // should be called to receive + send osc
  delay(100);
}

resultat MinMax (int newSample) {
  resultat r;
  r.finger = 1;
  r.Max = 0;
  r.Min = newSample;
  dataindex++;
  dataindex = dataindex % dataLength;
  Data[dataindex] = newSample;
  for (int x = 0; x < dataLength; x++) {
    if (Data[x] > r.Max) r.Max = Data[x];
    if (Data[x] < r.Min) r.Min = Data[x];
  }
  if (newSample < 10000) r.finger = 0;

  return r;

}
